/*******************************************************************************
* FXActor_X generated by MVN.RLLib using UE Explorer.
* MVN.RLLib ? 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class FXActor_X extends Actor
    abstract
    placeable
    hidecategories(Navigation);

enum EFXComponentState
{
    FXComponentState_Detached,
    FXComponentState_Attached,
    FXComponentState_PendingDetach,
    FXComponentState_MAX
};

enum EFXComponentTarget
{
    FXComponentTarget_All,
    FXComponentTarget_Local,
    FXComponentTarget_NonLocal,
    FXComponentTarget_MAX
};

enum EAttachActorLocationUnlockFlags
{
    EAALUF_None,
    EAALUF_X,
    EAALUF_Y,
    EAALUF_Z,
    EAALUF_MAX
};

struct FXEventSubscription
{
    var private FXActorEvent_X Event;
    var private delegate<EventFXStatePushed> OnPushed;
    var private delegate<EventFXStatePopped> OnPopped;

    structdefaultproperties
    {
        Event=none
    }
};

struct AttachToParameterWithUnlockAxes
{
    var() private name Parameter;
    var() private FXActor_X.EAttachActorLocationUnlockFlags IgnoredAxis;

    structdefaultproperties
    {
        Parameter=None
        //IgnoredAxis=EAttachActorLocationUnlockFlags.EAALUF_None
    }
};

struct FXAttachment
{
    var() private name Name;
    var() private name SkeletalMeshAttachName;
    var() private name SocketOrBoneName;
    var() private editconst name AttachToParameter;
    var() private float AttachDelay;
    var() private float DetachDelay;
    var() private float LifeTime;
    var() private FXActor_X.EFXComponentTarget Target;
    var() private export editinline ActorComponent Component;
    var() private array<private FXActorEvent_X> AttachAny;
    var() private array<private FXActorEvent_X> DetachAny;
    var() private array<private FXActorEvent_X> AttachAll;
    var() private editinline array<private editinline RuntimeParameterBase_X> RuntimeParameters;
    var() private editinline array<private editinline FXAttachmentTraitBase_X> Traits;
    var() private AttachToParameterWithUnlockAxes AttachToParameterActor;
    var private const bool bCreateDuplicates;
    var private transient bool bWantsAttachment;
    var private transient bool bInitializedTraits;
    var private editoronly bool bExistingComponent;
    var private editoronly bool bExistingAttachment;
    var private transient float AttachedTime;
    var private transient FXActor_X.EFXComponentState State;
    var private transient float WantsAttachmentChangeTime;
    var private export editinline transient SkeletalMeshComponent AttachedToMesh;
    var private transient Matrix RelativeTransform;
    var private transient int BoneIndex;
    var private transient Actor AttachToActor;
    var private transient Vector OffsetToAttachActor;

    structdefaultproperties
    {
        Name=None
        SkeletalMeshAttachName=None
        SocketOrBoneName=None
        AttachToParameter=None
        AttachDelay=0.0
        DetachDelay=0.0
        LifeTime=0.0
        //Target=EFXComponentTarget.FXComponentTarget_All
        Component=none
        //AttachAny=none
        //DetachAny=none
        //AttachAll=none
        //RuntimeParameters=none
        //Traits=none
        //AttachToParameterActor=(Parameter=None,IgnoredAxis=EAttachActorLocationUnlockFlags.EAALUF_None)
        bCreateDuplicates=false
        bWantsAttachment=false
        bInitializedTraits=false
        bExistingComponent=false
        bExistingAttachment=false
        AttachedTime=0.0
        //State=EFXComponentState.FXComponentState_Detached
        WantsAttachmentChangeTime=0.0
        AttachedToMesh=none
        RelativeTransform=(XPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),YPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),ZPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),WPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0))
        BoneIndex=0
        AttachToActor=none
        OffsetToAttachActor=(X=0.0,Y=0.0,Z=0.0)
    }
};

var private FXActorEvent_X SpawnState;
var private FXActorEvent_X ActivationState;
var() private array<private FXAttachment> Attachments;
var() private name SocketOrBoneName;
var() private bool bDeactivateWhenOwnerDestroyed;
var() private bool bAllowShadowCasting;
var() private bool bAutoActivate;
var() private bool bRenderInactive;
var privatewrite transient bool bActive;
var privatewrite const transient bool bHadOwner;
var() private FXActor_X Parent;
var privatewrite transient Actor AttachmentActor;
var privatewrite transient array<private FXActorEvent_X> FXStates;
var() private float DestroyWaitTime;
var privatewrite float DestroyTime;
var() private export editinline ParameterDispenser_X Parameters;
var() private editoronly const editconst int EditID;
var privatewrite const transient array<private FXEventSubscription> EventSubscriptions;
var private delegate<EventFXStatePushed> __EventFXStatePushed__Delegate;
var private delegate<EventFXStatePopped> __EventFXStatePopped__Delegate;

var() private bool bDedicatedServerRelevant;

var() SpriteComponent SpriteComp;

defaultproperties
{
	Begin Object Class=ParameterDispenser_X Name=DefaultParameters
	End Object

    bDeactivateWhenOwnerDestroyed=true
    bAutoActivate=true
    DestroyWaitTime=10.0
    Parameters=DefaultParameters
    TickGroup=TG_PostAsyncWork
    bAlwaysRelevant=true
    bHardAttach=true
    bDedicatedServerRelevant=false
    bEdShouldSnap = true
}

final delegate EventFXStatePushed(FXActor_X FXActor, FXActorEvent_X Event){}

final delegate EventFXStatePopped(FXActor_X FXActor, FXActorEvent_X Event){}

// Export UFXActor_X::execGetComponentByName(FFrame&, void* const)
final simulated function ActorComponent GetComponentByName(class ComponentClass, name ComponentName){}

// Export UFXActor_X::execAllAttachments(FFrame&, void* const)
final simulated function AllAttachments(class ComponentClass, out ActorComponent OutComponent, optional out int OutAttachmentIdx){}

simulated function PostBeginPlay(){}

simulated function SetAttachmentActor(Actor AttachToActor){}

final simulated function BindTo(FXActor_X ParentFXActor){}

private final simulated function HandleParentStatePushed(FXActor_X P, FXActorEvent_X Event){}

private final simulated function HandleParentStatePopped(FXActor_X P, FXActorEvent_X Event){}

// Export UFXActor_X::execActivate(FFrame&, void* const)
final function Activate(){}

// Export UFXActor_X::execDeactivate(FFrame&, void* const)
final function Deactivate(){}

// Export UFXActor_X::execIsStateActive(FFrame&, void* const)
final simulated function bool IsStateActive(FXActorEvent_X InState){}

// Export UFXActor_X::execAddState(FFrame&, void* const)
final simulated function AddState(FXActorEvent_X NewState){}

// Export UFXActor_X::execRemoveState(FFrame&, void* const)
final simulated function bool RemoveState(FXActorEvent_X OldState){}

// Export UFXActor_X::execToggleState(FFrame&, void* const)
final simulated function ToggleState(FXActorEvent_X NewState){}

// Export UFXActor_X::execGetControllerOwner(FFrame&, void* const)
protected final simulated function Controller GetControllerOwner(){}

// Export UFXActor_X::execIsLocallyControlled(FFrame&, void* const)
protected final simulated function bool IsLocallyControlled(){}

// Export UFXActor_X::execUpdateFXStates(FFrame&, void* const)
protected final simulated function UpdateFXStates(){}

protected final simulated event OnAttached(ActorComponent AC){}

protected final simulated event ActivateFXComponent(ActorComponent AC){}

final simulated event DeactivateFXComponent(ActorComponent AC){}

protected final simulated event OnDetached(ActorComponent AC){}

final simulated event DeactivateAndDestroy(){}

protected simulated function StopAllEffects(){}

final simulated function ResetParticles(){}

protected simulated function Inherit(FXActor_X Other){}

final simulated function OnTriggerFXActor_X(SeqAct_TriggerFXActor_X SeqAct){}

final simulated function OnToggle(SeqAct_Toggle Action){}

final simulated function SetStateEnabled(FXActorEvent_X State, bool bEnable){}

// Export UFXActor_X::execSubscribeState(FFrame&, void* const)
final function SubscribeState(FXActorEvent_X FXEvent, optional delegate<EventFXStatePushed> OnPushed, optional delegate<EventFXStatePushed> OnPopped){}

event Destroyed(){}

// Export UFXActor_X::execGetTrait(FFrame&, void* const)
final function FXAttachmentTraitBase_X GetTrait(class TraitClass, int AttachmentIdx){}

final event DumpDebugInfo(){}