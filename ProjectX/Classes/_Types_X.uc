/*******************************************************************************
* _Types_X generated by MVN.RLLib using UE Explorer.
* MVN.RLLib ? 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class _Types_X extends Object
    abstract;

enum EPsyNetTransportType
{
    PsyNetTransport_HTTP,
    PsyNetTransport_WebSocket,
    PsyNetTransport_MAX
};

enum EOnlinePlayerRole
{
    OPR_PrivateMatchAdmin,
    OPR_SuperPrivateMatchAdmin,
    OPR_MAX
};

enum EOnlinePlayerPermission
{
    OPP_PrivateMatchAdmin,
    OPP_SuperPrivateMatchAdmin,
    OPP_MAX
};

enum EBlogTileType
{
    EBlogTileType_Carousel,
    EBlogTileType_RLCS,
    EBlogTileType_Community,
    EBlogTileType_MAX
};

enum EReservationStatus
{
    ReservationStatus_None,
    ReservationStatus_Reserved,
    ReservationStatus_Joining,
    ReservationStatus_InGame,
    ReservationStatus_MAX
};

enum EPartyMatchmakingRestriction
{
    PMR_NotOriginalAppOwner,
    PMR_PendingLicenseAgreement,
    PMR_InMainMenu,
    PMR_NotLoggedInPsyNet,
    PMR_MAX
};

enum EUINavigationMode
{
    UINavigationMode_Keyboard,
    UINavigationMode_Gamepad,
    UINavigationMode_Cursor,
    UINavigationMode_MAX
};

enum EButtonPressType
{
    BPT_Normal,
    BPT_Tap,
    BPT_Hold,
    BPT_DoubleTap,
    BPT_Toggle,
    BPT_MAX
};

enum EAxisSign
{
    AxisSign_None,
    AxisSign_Positive,
    AxisSign_Negative,
    AxisSign_MAX
};

enum ERemappable
{
    Remappable_All,
    Remappable_Key,
    Remappable_Axis,
    Remappable_KeyTriggerAxis,
    Remappable_None,
    Remappable_MAX
};

enum EDatabaseEnvironment
{
    DBE_DevLocal,
    DBE_Dev,
    DBE_Test,
    DBE_Production,
    DBE_MAX
};

enum EAuthResult
{
    AuthResult_OK,
    AuthResult_Unauthorized,
    AuthResult_MAX
};

enum EJoinMatchType
{
    JMT_Public,
    JMT_Private,
    JMT_LanHost,
    JMT_LanGuest,
    JMT_MAX
};

enum EWebRequestAuthorization
{
    WRA_Offline,
    WRA_Authorizing,
    WRA_Authorized,
    WRA_Banned,
    WRA_MAX
};

enum EPlayerAuthState
{
    EPlayerAuthState_None,
    EPlayerAuthState_NewUserFlow,
    EPlayerAuthState_HighlightReel,
    EPlayerAuthState_SetName,
    EPlayerAuthState_RequestingInitialLoadout,
    EPlayerAuthState_InitialLoadoutFailed,
    EPlayerAuthState_CarSelect,
    EPlayerAuthState_CarSelected,
    EPlayerAuthState_MAX
};

enum EConsoleQualityMode
{
    ConsoleQualityMode_Performance,
    ConsoleQualityMode_Quality,
    ConsoleQualityMode_MAX
};

enum EBanType
{
    BanType_None,
    BanType_Auth,
    BanType_Chat,
    BanType_Parental,
    BanType_Club,
    BanType_Trade,
    BanType_MAX
};

struct native NetStats
{
    var private float PingMin;
    var private float Jitter;
    var private float LossPct;

    structdefaultproperties
    {
        PingMin=0.0
        Jitter=0.0
        LossPct=0.0
    }
};

struct PlayerPermissionsList
{
    var private UniqueNetId PlayerID;
    var private array<private _Types_X.EOnlinePlayerPermission> Permissions;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        //Permissions=none
    }
};

struct ClubMember
{
    var private UniqueNetId PlayerID;
    var private string PlayerName;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PlayerName=""
    }
};

struct native DownloadedImage
{
    var private string URL;
    var private Texture2DDynamic Texture;

    structdefaultproperties
    {
        URL=""
        Texture=none
    }
};

struct native IntVector3
{
    var() private int X;
    var() private int Y;
    var() private int Z;

    structdefaultproperties
    {
        X=0
        Y=0
        Z=0
    }
};

struct native MetricsEvent
{
    var private UniqueNetId PlayerID;
    var private float TimeSeconds;
    var private int Version;
    var private string EventName;
    var private string EventData;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        TimeSeconds=0.0
        Version=0
        EventName=""
        EventData=""
    }
};

struct native RenderProfile
{
    var private float GameThreadTime;
    var private float RenderThreadTime;
    var private float GPUTime;
    var private float FrameTime;
    var private float FPS;
    var private float AccumGameThreadTime;
    var private float AccumRenderThreadTime;
    var private float AccumGPUTime;
    var private float AccumFrameTime;
    var private int NumSamples;

    structdefaultproperties
    {
        GameThreadTime=0.0
        RenderThreadTime=0.0
        GPUTime=0.0
        FrameTime=0.0
        FPS=0.0
        AccumGameThreadTime=0.0
        AccumRenderThreadTime=0.0
        AccumGPUTime=0.0
        AccumFrameTime=0.0
        NumSamples=0
    }
};

struct PlayerTitleCategory
{
    var private name Id;
    var private string Color;
    var private string GlowColor;

    structdefaultproperties
    {
        Id=None
        Color=""
        GlowColor=""
    }
};

struct PlayerTitleData
{
    var private databinding name Id;
    var private databinding string Text;
    var private name Category;
    var private databinding Color Color;
    var private databinding Color GlowColor;

    structdefaultproperties
    {
        Id=None
        Text=""
        Category=None
        Color=(R=0,G=0,B=0,A=0)
        GlowColor=(R=0,G=0,B=0,A=0)
    }
};

struct PartyMemberServer
{
    var private string BeaconAddress;
    var private string Password;
    var private int PlaylistId;

    structdefaultproperties
    {
        BeaconAddress=""
        Password=""
        PlaylistId=0
    }
};

struct PartyMember
{
    var private UniqueNetId PrimaryMemberId;
    var private UniqueNetId MemberId;
    var private string MemberName;
    var private int MatchmakeRestrictions;
    var private int LocalControllerId;
    //var private Engine.PlatformAccountSettings.ECrossPlatformChatState CrossChatState;
    var private bool bDisableCrossPlay;
    var private UniqueNetId TradingMemberId;
    var private Guid TradeId;
    var private bool bReadyToTrade;
    var private PartyMemberServer Server;
    //var private UniqueLobbyId PlatformParty;

    structdefaultproperties
    {
        //PrimaryMemberId=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        //MemberId=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        MemberName=""
        MatchmakeRestrictions=0
        LocalControllerId=-1
        //CrossChatState=ECrossPlatformChatState.PCCS_Everybody
        bDisableCrossPlay=false
        //TradingMemberId=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        TradeId=(A=0,B=0,C=0,D=0)
        bReadyToTrade=false
        Server=(BeaconAddress="",Password="",PlaylistId=0)
        //PlatformParty=(Uid=0,Platform=OnlinePlatform.OnlinePlatform_Unknown)
    }
};

struct CachedRegionPing
{
    var private name Name;
    var private float Ping;

    structdefaultproperties
    {
        Name=None
        Ping=0.0
    }
};

struct RPCRewardLevelData
{
    var private int SeasonLevel;
    var private int SeasonLevelWins;

    structdefaultproperties
    {
        SeasonLevel=0
        SeasonLevelWins=0
    }
};

struct RPCPlayerRewardLevelData extends RPCRewardLevelData
{
    var private UniqueNetId PlayerID;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
    }
};

struct native PlayerSeasonRewardProgress
{
    var private UniqueNetId PlayerID;
    var private int Level;
    var private int Wins;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        Level=0
        Wins=0
    }
};

struct native SkillRating
{
    var private float Mu;
    var private float Sigma;

    structdefaultproperties
    {
        Mu=25.0
        Sigma=8.3330
    }
};

struct TierSkillRating extends SkillRating
{
    var private int Tier;
    var private int Division;
    var private int MatchesPlayed;
    var private float MMR;
};

struct PlayerSkillRating extends TierSkillRating
{
    var private UniqueNetId PlayerID;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
    }
};

struct PlaylistSkillRating extends PlayerSkillRating
{
    var private int Playlist;
};

struct PlaylistTierSkillRating extends TierSkillRating
{
    var private int Playlist;
};

struct native KeyHandler
{
    var private name Key;
    var private delegate<KeyPressDelegate> Handler;

    structdefaultproperties
    {
        Key=None
    }
};

struct native BindingAction
{
    var private databinding name Action;
    var private databinding name Category;
    var private databinding name Axis;
    var private databinding _Types_X.EAxisSign AxisSign;
    var private string Command;
    var private bool bDisableRemapping;
    var private int Priority;

    structdefaultproperties
    {
        Action=None
        Category=None
        Axis=None
        //AxisSign=EAxisSign.AxisSign_None
        Command=""
        bDisableRemapping=false
        Priority=0
    }
};

struct native PlayerBinding
{
    var private databinding name Action;
    var private databinding name Key;
    var private databinding _Types_X.EAxisSign AxisSign;
    var private databinding _Types_X.EButtonPressType PressType;
    var private databinding float Speed;
    var private databinding bool bRequired;
    var private _Types_X.ERemappable Remappable;
    var private transient float PressedTime;
    var private transient float ReleasedTime;
    var private transient bool bTapped;
    var private transient bool bToggled;

    structdefaultproperties
    {
        Action=None
        Key=None
        //AxisSign=EAxisSign.AxisSign_None
        //PressType=EButtonPressType.BPT_Normal
        Speed=0.0
        bRequired=false
        //Remappable=ERemappable.Remappable_All
        PressedTime=0.0
        ReleasedTime=0.0
        bTapped=false
        bToggled=false
    }
};

struct native Ray
{
    var private Vector Origin;
    var private Vector Dir;

    structdefaultproperties
    {
        Origin=(X=0.0,Y=0.0,Z=0.0)
        Dir=(X=0.0,Y=0.0,Z=0.0)
    }
};

struct native CustomAnimSettings
{
    var() private name AnimName;
    var() private bool bLoop;
    var() private float BlendInTime;
    var() private float BlendOutTime;
    var() private float StartTime;
    var() private float EndTime;
    var() private float Rate;
    var() private SkeletalMeshComponent.ERootMotionMode RootMotionMode;
    var() private AnimNodeSequence.ERootBoneAxis RootBoneAxis;
    var() private SkeletalMeshComponent.ERootMotionRotationMode RootMotionRotationMode;
    var() private AnimNodeSequence.ERootRotationOption RootBoneRotationAxis;
    var() private Vector RootMotionAccelScale;
    var() private bool bOverride;
    var() private bool bMirrored;

    structdefaultproperties
    {
        AnimName=None
        bLoop=false
        BlendInTime=0.150
        BlendOutTime=0.150
        StartTime=0.0
        EndTime=0.0
        Rate=1.0
        //RootMotionMode=ERootMotionMode.RMM_Ignore
        //RootBoneAxis=ERootBoneAxis.RBA_Discard
        //RootMotionRotationMode=ERootMotionRotationMode.RMRM_Ignore
        //RootBoneRotationAxis=ERootRotationOption.RRO_Default
        RootMotionAccelScale=(X=1.0,Y=1.0,Z=1.0)
        bOverride=true
        bMirrored=false
    }
};

struct native UIWidgetMatrix
{
    var private Vector Position;
    var private Vector Size;
    var private Vector Scale;
    var private LinearColor Tint;

    structdefaultproperties
    {
        Position=(X=0.0,Y=0.0,Z=0.0)
        Size=(X=0.0,Y=0.0,Z=0.0)
        Scale=(X=1.0,Y=1.0,Z=0.0)
        Tint=(R=1.0,G=1.0,B=1.0,A=1.0)
    }
};

struct native UIAnimValue
{
    var private float X;
    var private float Y;
    var private float R;
    var private float G;
    var private float B;
    var private float A;

    structdefaultproperties
    {
        X=0.0
        Y=0.0
        R=0.0
        G=0.0
        B=0.0
        A=0.0
    }
};

struct native UITimer
{
    var() private name Event;
    var() private float Delay;

    structdefaultproperties
    {
        Event=None
        Delay=0.0
    }
};

struct native ProcedureKeyValuePair
{
    var private name Key;
    var private string Value;

    structdefaultproperties
    {
        Key=None
        Value=""
    }
};

struct native ProcedureResult
{
    var private array<private ProcedureKeyValuePair> KVPairs;

    structdefaultproperties
    {
        //KVPairs=none
    }
};

struct native ReplicatedRBState
{
    var private Quat Quaternion;
    var private Vector Location;
    var private Vector LinearVelocity;
    var private Vector AngularVelocity;
    var private float Time;
    var private bool bSleeping;
    var private bool bNewData;

    structdefaultproperties
    {
        Quaternion=(X=0.0,Y=0.0,Z=0.0,W=0.0)
        Location=(X=0.0,Y=0.0,Z=0.0)
        LinearVelocity=(X=0.0,Y=0.0,Z=0.0)
        AngularVelocity=(X=0.0,Y=0.0,Z=0.0)
        Time=0.0
        bSleeping=false
        bNewData=false
    }
};

struct native ReplicatedRBStateNoQuat
{
    var private float QuatX;
    var private float QuatY;
    var private float QuatZ;
    var private float QuatW;
    var private Vector Location;
    var private Vector LinearVelocity;
    var private Vector AngularVelocity;
    var private bool bSleeping;

    structdefaultproperties
    {
        QuatX=0.0
        QuatY=0.0
        QuatZ=0.0
        QuatW=0.0
        Location=(X=0.0,Y=0.0,Z=0.0)
        LinearVelocity=(X=0.0,Y=0.0,Z=0.0)
        AngularVelocity=(X=0.0,Y=0.0,Z=0.0)
        bSleeping=false
    }
};

struct native GamePlaylist
{
    var private string FriendlyName;
    var private name Id;
    var private array<private name> GameTags;

    structdefaultproperties
    {
        FriendlyName=""
        Id=None
        //GameTags=none
    }
};

struct ReservationPlayerData
{
    var private UniqueNetId PlayerID;
    var private string PlayerName;
    var private float SkillMu;
    var private float SkillSigma;
    var private int Tier;
    var private bool bRemotePlayer;
    var private array<private int> Loadout;
    var private array<private name> MapLikes;
    var private array<private name> MapDislikes;
    var private Qword ClubID;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PlayerName=""
        SkillMu=0.0
        SkillSigma=0.0
        Tier=0
        bRemotePlayer=false
        //Loadout=none
        //MapLikes=none
        //MapDislikes=none
        //ClubID=0
    }
};

struct ReplicatedReservationData
{
    var private UniqueNetId PlayerID;
    var private string PlayerName;
    var private _Types_X.EReservationStatus Status;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PlayerName=""
        //Status=EReservationStatus.ReservationStatus_None
    }
};

struct native LastTimePeriodLeaderData
{
    var private string LeaderboardId;
    var private array<private string> PlayerNames;
    var private int Value;

    structdefaultproperties
    {
        LeaderboardId=""
        //PlayerNames=none
        Value=0
    }
};

struct native ClubColorSet
{
    var private byte TeamColorID;
    var private byte CustomColorID;
    var private bool bTeamColorSet;
    var private bool bCustomColorSet;

    structdefaultproperties
    {
        TeamColorID=0
        CustomColorID=0
        bTeamColorSet=false
        bCustomColorSet=false
    }
};

struct native CustomMatchTeamSettings
{
    var private string Name;
    var private ClubColorSet Colors;
    var private int GameScore;

    structdefaultproperties
    {
        Name=""
        Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false)
        GameScore=0
    }
};

struct native CustomMatchSettings
{
    var private string GameTags;
    var private name MapName;
    var private byte GameMode;
    var private int MaxPlayerCount;
    var private string ServerName;
    var private string Password;
    var private bool bPublic;
    var private CustomMatchTeamSettings TeamSettings[2];
    var private bool bClubServer;

    structdefaultproperties
    {
        GameTags=""
        MapName=None
        GameMode=0
        MaxPlayerCount=0
        ServerName=""
        Password=""
        bPublic=false
        TeamSettings[0]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false),GameScore=0)
        TeamSettings[1]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false),GameScore=0)
        bClubServer=false
    }
};

struct JoinMatchSettings
{
    var private _Types_X.EJoinMatchType MatchType;
    var private int PlaylistId;
    var private bool bFriendJoin;
    var private bool bMigration;
    var private bool bRankedReconnect;
    var private string Password;
    var private string ReservationID;

    structdefaultproperties
    {
        //MatchType=EJoinMatchType.JMT_Public
        PlaylistId=0
        bFriendJoin=false
        bMigration=false
        bRankedReconnect=false
        Password=""
        ReservationID=""
    }
};

struct PartyJoinMatchSettings
{
    var private string BeaconAddress;
    var private string GameAddress;
    var private int PlaylistId;
    var private bool bFriendJoin;
    var private string Password;
    var private string ReservationID;

    structdefaultproperties
    {
        BeaconAddress=""
        GameAddress=""
        PlaylistId=0
        bFriendJoin=false
        Password=""
        ReservationID=""
    }
};

struct SkillMatchPlayer
{
    var private UniqueNetId PlayerID;
    var private float PctTimePlayed;
    var private bool bQuitter;
    var private int PartyID;
    var private int Score;
    var private int Team;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PctTimePlayed=0.0
        bQuitter=false
        PartyID=0
        Score=0
        Team=0
    }
};

struct ServerResult
{
    var private string Address;
    var private string ServerName;
    var private CustomMatchSettings Settings;

    structdefaultproperties
    {
        Address=""
        ServerName=""
        Settings=(GameTags="",MapName=None,GameMode=0,MaxPlayerCount=0,ServerName="",Password="",bPublic=false,TeamSettings=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false),GameScore=0),TeamSettings[1]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false),GameScore=0),bClubServer=false)
    }
};

struct SkillMatchData
{
    var private Qword serverId;
    var private int Playlist;
    var private int WinningTeam;
    var private int Team0Score;
    var private int Team1Score;
    var private bool bOverTime;

    structdefaultproperties
    {
        //serverId=0
        Playlist=0
        WinningTeam=0
        Team0Score=0
        Team1Score=0
        bOverTime=false
    }
};

struct SkillMatchParty
{
    var private int PartyID;
    var private float PctTimePlayed;
    var private bool bQuitter;
    var private array<private UniqueNetId> Players;

    structdefaultproperties
    {
        PartyID=0
        PctTimePlayed=0.0
        bQuitter=false
        //Players=none
    }
};

struct SkillMatchPartyRating extends TierSkillRating
{
    var private int PartyID;
};

/*
struct native CrossplayGroup
{
    var private array<private _Types_Core.OnlinePlatform> Platforms;

    structdefaultproperties
    {
        Platforms=none
    }
};
*/

struct native MapPrefs
{
    var private array<private name> Likes;
    var private array<private name> Dislikes;

    structdefaultproperties
    {
        //Likes=none
        //Dislikes=none
    }
};

struct CheckReservationResponse
{
    var private string IP;
    var private string ServerName;
    var private int Playlist;
    var private string Region;
    var private string Host;
    var private int Port;
    var private string Address;
    var private string ReservationID;

    structdefaultproperties
    {
        IP=""
        ServerName=""
        Playlist=0
        Region=""
        Host=""
        Port=0
        Address=""
        ReservationID=""
    }
};

struct CheckReservationData
{
    var private string Address;
    var private string ServerName;
    var private int Playlist;
    var private string Region;
    var private string ReservationID;

    structdefaultproperties
    {
        Address=""
        ServerName=""
        Playlist=0
        Region=""
        ReservationID=""
    }
};

struct native ReservationData
{
    var private UniqueNetId PlayerID;
    var private string PlayerName;
    var private UniqueNetId PartyID;
    var private _Types_X.EReservationStatus Status;
    var private float TimeoutTime;
    var private bool bDisableCrossPlay;
    var private PlayerReplicationInfo PRI;
    var private byte Team;
    //var private AddReservationMessage_X ReservationMessage;
    //var private TcpConnection Connection;
    var private SkillRating Skill;
    var private array<private name> MapLikes;
    var private array<private name> MapDislikes;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PlayerName=""
        //PartyID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        //Status=EReservationStatus.ReservationStatus_None
        TimeoutTime=0.0
        bDisableCrossPlay=false
        PRI=none
        Team=255
        //ReservationMessage=none
        //Connection=none
        Skill=(Mu=25.0,Sigma=8.3330)
        //MapLikes=none
        //MapDislikes=none
    }
};

struct native SuperSonicConfig
{
    var private float Speed;
    var private float TurnoffSpeedBuffer;
    var private float TurnoffTime;

    structdefaultproperties
    {
        Speed=0.0
        TurnoffSpeedBuffer=0.0
        TurnoffTime=0.0
    }
};

struct native CarInteractionConfig
{
    var private float PushFactor;
    var private float BumperPushFactor;
    var private float ZPushFactor;
    var private float BumpInterval;
    var private float BumperAngleDemolishYaw;
    var private float BumperAngleDemolishPitch;
    var private float BumperAngleBumpYaw;
    var private float BumperAngleBumpPitch;

    structdefaultproperties
    {
        PushFactor=0.0
        BumperPushFactor=0.0
        ZPushFactor=0.0
        BumpInterval=0.0
        BumperAngleDemolishYaw=0.0
        BumperAngleDemolishPitch=0.0
        BumperAngleBumpYaw=0.0
        BumperAngleBumpPitch=0.0
    }
};

struct native PsyNetPersonaData
{
    var private UniqueNetId PlayerID;
    var private string PlayerName;
    var private string PresenceInfo;
    var private string PresenceState;
    //var private PsyTag PsyTag;

    structdefaultproperties
    {
        //PlayerID=(Uid=0,NpId=(Handle=(Data=0,Data[1]=0,Term=0,Dummy=0,Dummy[1]=0,Dummy[2]=0),Opt=0,Reserved=0),Platform=OnlinePlatform.OnlinePlatform_Unknown,SplitscreenID=0)
        PlayerName=""
        PresenceInfo=""
        PresenceState=""
        //PsyTag=(Name="",Code=0)
    }
};

var private delegate<KeyPressDelegate> __KeyPressDelegate__Delegate;
//var private delegate<OnPriviledgeChecked> __OnPriviledgeChecked__Delegate;
//var private delegate<ServiceExecutionDelegate> __ServiceExecutionDelegate__Delegate;
var private delegate<OnTimer> __OnTimer__Delegate;

final delegate bool KeyPressDelegate(){}

//final delegate OnPriviledgeChecked(PrivilegeCheck_X PrivilegeCheck){}

static final function IntVector3 ToIntVector3(Vector V){}

//final delegate ServiceExecutionDelegate(PsyNetClientService_X Service){}

static final function CheckReservationData GetReservationData(const out CheckReservationResponse Response){}

private final delegate OnTimer(){}
